# Generated by Django 4.0.6 on 2022-11-10 07:27

import ckeditor.fields
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('tags', models.CharField(default='none', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='images/profile')),
                ('is_private', models.BooleanField(blank=True, default=False, null=True)),
                ('community_admins', models.ManyToManyField(blank=True, default=None, related_name='community_admins', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, default=None, related_name='members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('reply_to', models.IntegerField(blank=True, default=-1, null=True)),
                ('is_reply', models.BooleanField(blank=True, default=False, null=True)),
                ('is_parent_a_reply', models.BooleanField(blank=True, default=False, null=True)),
                ('reply_root', models.IntegerField(blank=True, default=-1, null=True)),
                ('post_date', models.DateField(auto_now_add=True)),
                ('post_datetime', models.DateTimeField(auto_now_add=True)),
                ('category', models.CharField(default='none', max_length=50)),
                ('tags', models.CharField(blank=True, default='', max_length=255)),
                ('like_count', models.BigIntegerField(default='0')),
                ('reply_count', models.BigIntegerField(default='0')),
                ('video', models.FileField(blank=True, null=True, upload_to='videos/')),
                ('has_images', models.BooleanField(blank=True, default=False, null=True)),
                ('has_video', models.BooleanField(blank=True, default=False, null=True)),
                ('body', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('images_ids_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1, null=True), blank=True, default=list, null=True, size=None)),
                ('images_urls_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default='', max_length=500, null=True), blank=True, default=list, null=True, size=None)),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='page3.community')),
                ('likes', models.ManyToManyField(blank=True, default=None, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=50, null=True)),
                ('post', models.ManyToManyField(blank=True, default=None, related_name='tagged_posts', to='page3.post')),
            ],
        ),
        migrations.CreateModel(
            name='Replies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply_to', models.IntegerField(blank=True, default=-1, null=True)),
                ('post_id', models.IntegerField(blank=True, default=-1, null=True)),
                ('reply_root', models.IntegerField(blank=True, default=-1, null=True)),
                ('reply_to_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='page3.post')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='images/profile')),
                ('discord_link', models.CharField(blank=True, max_length=255, null=True)),
                ('twitch_link', models.CharField(blank=True, max_length=255, null=True)),
                ('communities', models.ManyToManyField(blank=True, default=None, related_name='followers', to='page3.community')),
                ('followers', models.ManyToManyField(blank=True, default=None, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(blank=True, default=None, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='user_profile',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='page3.profile'),
        ),
        migrations.CreateModel(
            name='ImageFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to='images/')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='page3.post')),
            ],
        ),
        migrations.CreateModel(
            name='GameProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(choices=[('Valorant', 'Valorant'), ('Call of Duty', 'Call of Duty'), ('League of Legends', 'League of Legends'), ('Counter Shit: GO', 'Counter Shit: GO')], max_length=50)),
                ('server', models.CharField(choices=[('Val', [('APAC', 'Asia Pacific'), ('EMEA', 'Europe'), ('NA', 'North America(meaning shit)'), ('JA', 'Japan')]), ('COD', [('APAC', 'Asia Pacific'), ('EMEA', 'Europe'), ('NA', 'North America(meaning shit)')]), ('LOL', [('APAC', 'Asia Pacific'), ('EMEA', 'Europe'), ('NA', 'North America(meaning shit)')]), ('CS', [('EMEA', 'Europe'), ('NA', 'North America(meaning shit)')])], max_length=50)),
                ('rank', models.CharField(choices=[('Val', [('IRON', 'Iron :((('), ('Bronze', 'Bronze :(('), ('Silver', 'Silver :('), ('Gold', 'Gold :('), ('Platinum', 'Platinum '), ('Diamond', 'Diamond :) '), ('Asencdant', 'Asencdant :)) '), ('Immortal', 'Immortal >_< '), ('Radiant', 'Radiant :> ')]), ('COD', [('Rookie', 'Rookie :((('), ('Veteran', 'Veteran :(('), ('Elite', 'Elite :('), ('Pro', 'Pro :('), ('Master', 'Master '), ('Grandmaster', 'Grandmaster :) '), ('Legendary', 'Legendary :)) ')]), ('LOL', [('IRON', 'Iron :((('), ('Bronze', 'Bronze :(('), ('Silver', 'Silver :('), ('Gold', 'Gold :('), ('Platinum', 'Platinum '), ('Diamond', 'Diamond :) '), ('Master', 'Master :)) '), ('Grandmaster', 'Grandmaster >_< '), ('Challenger', 'Challenger :> ')]), ('CS', [('Silver', 'Silver :('), ('Gold', 'Gold :('), ('Master Guardian', 'Master Guardian '), ('Distinguished Master Guardian', 'Distinguished Master Guardian :) '), ('Legendary', 'Legendary :)) '), ('Elite', 'Elite >_< ')])], default='', max_length=50)),
                ('user_status', models.CharField(choices=[('Looking for teams', 'Looking for teams'), ('Looking for talent', 'Looking for talent'), ('none', 'none')], default='none', max_length=50)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
